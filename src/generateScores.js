/**
 * @param {Object} jsonDataRequest - The json request object with team members and applicants
 * @return {Object} - score for each applicant generated by the generateScore function
 */

export const scoreAllApplicants = (jsonData) => {
  const applicants = jsonData["applicants"];
  const teamMembers = jsonData["team"];

  const teamMemberAverages = createAverages(teamMembers);

  //Format for the return array of objects for all scores
  const completedScores = { scoresForAllApplicants: [] };

  applicants.forEach((applicantObj) => {
    const finalScore = generateScore(
      applicantObj.attributes,
      teamMemberAverages
    );
    completedScores["scoresForAllApplicants"].push({
      name: applicantObj.name,
      score: finalScore,
    });
  });

  return completedScores;
};

/**
 * @param {Object} attributes - all attributes of a single applicant
 * @param {Object} teamMemberAverages - average of all attributes of team members
 * @return {Number} - a number between 0-1 generated by comparing the applicant attributes to team members averages
 */
const generateScore = (attributes, teamMemberAverages) => {
  // Compare each attribute to the averageWeights and how close they are
  attributes.strength =
    parseInt(attributes.strength) - teamMemberAverages.strength;
  attributes.endurance =
    parseInt(attributes.endurance) - teamMemberAverages.endurance;
  attributes.intelligence =
    parseInt(attributes.intelligence) - teamMemberAverages.intelligence;
  attributes.spicyFoodTolerance =
    parseInt(attributes.spicyFoodTolerance) -
    teamMemberAverages.spicyFoodTolerance;

  if (attributes.strength < 0) {
    attributes.strength *= -1;
  }
  if (attributes.endurance < 0) {
    attributes.endurance *= -1;
  }
  if (attributes.intelligence < 0) {
    attributes.intelligence *= -1;
  }
  if (attributes.spicyFoodTolerance < 0) {
    attributes.spicyFoodTolerance *= -1;
  }

  let finalScore = Object.values(attributes).reduce(
    (accumulator, currentValue) => accumulator + currentValue
  );
  finalScore /= 40;

  finalScore -= 1;

  if (finalScore !== 0) {
    return parseFloat(finalScore.toFixed(3)) * -1;
  } else {
    //Indicated perfect compatability
    return 1;
  }
};

/**
 * @param {Object} teamMembers
 * @return {Number} - average of all attributes
 */
const createAverages = (teamMembers) => {
  let intelligence = 0;
  let strength = 0;
  let endurance = 0;
  let spicyFoodTolerance = 0;
  teamMembers.forEach((member) => {
    intelligence = intelligence + member.attributes.intelligence;
    strength = strength + member.attributes.strength;
    endurance = endurance + member.attributes.endurance;
    spicyFoodTolerance =
      spicyFoodTolerance + member.attributes.spicyFoodTolerance;
  });
  intelligence /= teamMembers.length;
  strength /= teamMembers.length;
  endurance /= teamMembers.length;
  spicyFoodTolerance /= teamMembers.length;

  intelligence = parseFloat(intelligence.toFixed(3));
  strength = parseFloat(strength.toFixed(3));
  endurance = parseFloat(endurance.toFixed(3));
  spicyFoodTolerance = parseFloat(spicyFoodTolerance.toFixed(3));

  return { intelligence, strength, endurance, spicyFoodTolerance };
};
