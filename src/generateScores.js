/**
 * @param {Object} jsonApplicantDataRequest - The json request object
 * @return {Object} - score for each applicant generated by the generateScore function
 */

export const scoreAllApplicants = (jsonApplicantData) => {
  const applicants = jsonApplicantData["applicants"];
  const teamMembers = jsonApplicantData["team"];

  const weights = createWeightedAttributes(teamMembers);
  const averagedWeights = createAverageOfWeightedValues(weights);

  //Format for the return array of objects for all scores
  const completedScores = { scoresForAllApplicants: [] };

  applicants.forEach((applicantObj) => {
    const finalScore = generateScore(applicantObj.attributes, averagedWeights);
    completedScores["scoresForAllApplicants"].push({
      name: applicantObj.name,
      score: finalScore,
    });
  });

  return completedScores;
};

/**
 * @param {Object} attributes - all attributes of a single applicant
 * @return {Number} - a number between 0-1 generated by weighted attributes
 * Input is the attributes for each applicant and generates a score for them based on attributes
 */
const generateScore = (attributes, averagedWeights) => {
  //Strength and endurance and weighted more heavily than intelligence and spicyFoodTolerance
  attributes.strength =
    parseInt(attributes.strength) * averagedWeights.strength;
  attributes.endurance =
    parseInt(attributes.endurance) * averagedWeights.endurance;
  attributes.intelligence =
    parseInt(attributes.intelligence) * averagedWeights.intelligence;
  attributes.spicyFoodTolerance =
    parseInt(attributes.spicyFoodTolerance) *
    averagedWeights.spicyFoodTolerance;

  let finalScore = Object.values(attributes).reduce(
    (accumulator, currentValue) => accumulator + currentValue
  );
  finalScore /= 40;

  return parseFloat(finalScore.toFixed(3));
};

/**
 * @param {Object} teamMembers - all team members
 * @return {Object} - team members after dividing all of their attribute values by 10
 */
const createWeightedAttributes = (teamMembers) => {
  teamMembers.forEach((member) => {
    member.attributes.intelligence =
      parseInt(member.attributes.intelligence) / 10;
    member.attributes.strength = parseInt(member.attributes.strength) / 10;
    member.attributes.endurance = parseInt(member.attributes.endurance) / 10;
    member.attributes.spicyFoodTolerance =
      parseInt(member.attributes.spicyFoodTolerance) / 10;
  });
  return teamMembers;
};

/**
 * @param {Object} attributes - attribute values after they have been divided by 10
 * @return {Number} - average of all attributes that is between 0-1
 */
const createAverageOfWeightedValues = (teamMembers) => {
  let intelligence = 0;
  let strength = 0;
  let endurance = 0;
  let spicyFoodTolerance = 0;
  teamMembers.forEach((member) => {
    intelligence = intelligence + member.attributes.intelligence;
    strength = strength + member.attributes.strength;
    endurance = endurance + member.attributes.endurance;
    spicyFoodTolerance =
      spicyFoodTolerance + member.attributes.spicyFoodTolerance;
  });
  intelligence /= teamMembers.length;
  strength /= teamMembers.length;
  endurance /= teamMembers.length;
  spicyFoodTolerance /= teamMembers.length;

  intelligence = parseFloat(intelligence.toFixed(3));
  strength = parseFloat(strength.toFixed(3));
  endurance = parseFloat(endurance.toFixed(3));
  spicyFoodTolerance = parseFloat(spicyFoodTolerance.toFixed(3));

  return { intelligence, strength, endurance, spicyFoodTolerance };
};
